import { Identifier, Presence, SpyPlugin } from '@big-sister/types'
import { Observable } from 'rxjs'

const DEFAULT_IDENTIFIERS = ['alice', 'bob', 'charlie']
const DEFAULT_INTERVAL = 10000
const PROBABILITY_OF_CHANGING_PRESENCE = .02

/**
 * Provides random presence information for testing.
 */
const plugin: SpyPlugin<Options> = async (options) => {
  const {
    identifiers = DEFAULT_IDENTIFIERS,
    interval = DEFAULT_INTERVAL,
  } = options
  const presence = new Map<Identifier, boolean>(generateInitialPresence())
  const presence$ = (
    Observable.timer(0, interval)
    .do(randomlyMutatePresence)
    .map(generatePresence)
  )
  return { presence$ }

  function generateInitialPresence(): [Identifier, boolean][] {
    return (
      identifiers
      .map((identifier) => [identifier, Math.random() < .5] as [Identifier, boolean])
    )
  }

  function randomlyMutatePresence(): void {
    for (const identifier of identifiers) {
      const wasPresent = !!presence.get(identifier)
      if (Math.random() < PROBABILITY_OF_CHANGING_PRESENCE) {
        presence.set(identifier, !wasPresent)
      }
    }
  }

  function generatePresence(): Presence {
    return (
      [...presence.entries()]
      .filter(([, isPresent]) => isPresent)
      .map(([identifier]) => identifier)
    )
  }
}

export default plugin

interface Options {

  /**
   * The identifiers whose presence is simulated.
   *
   * Defaults to ['alice', 'bob', 'charlie']
   */
  identifiers: Identifier[]

  /**
   * The interval (in milliseconds) in which new presence information is generated.
   *
   * Defaults to 10000.
   */
  interval?: number
}
