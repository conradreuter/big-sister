import { ExtensionPlugin, Identifier, Presence } from '@big-sister'
import createLogger from '@big-sister/logging'
import { Observable } from 'rxjs'

const log = createLogger('extension-map-identifiers')

const IDENTIFIER_MAP_KEY = 'extension-map-identifiers__identifier-map'

/**
 * Maps the identities provided by the spy.
 */
const plugin: ExtensionPlugin<Options> = async (options, collector, spy, store) => {
  const identifierMap: { [identifier: string]: Identifier } = {
    ...options.identifierMap,
    ...await store.readKeyValuePair(IDENTIFIER_MAP_KEY),
  }
  log.verbose('Mapping the following identifiers:')
  for (const [identifier, mappedIdentifier] of Object.entries(identifierMap)) {
    log.verbose(`'${identifier}' --> '${mappedIdentifier}'`)
  }
  if (options.removeNonMatched) log.verbose('... and removing all others')
  return {
    transformPresence,
  }

  function transformPresence(presence$: Observable<Presence>): Observable<Presence> {
    return presence$.map(presence => {
      const { presentIdentifiers, timestamp } = presence
      const mappedIdentifiers: Identifier[] = []
      for (const identifier of presentIdentifiers) {
        const mappedIdentifier = identifierMap[identifier]
        if (mappedIdentifier) {
          log.verbose(`Mapping '${identifier}' to '${mappedIdentifier}'`)
          mappedIdentifiers.push(mappedIdentifier)
        } else {
          log.verbose(`No match for '${identifier}'`)
          if (!options.removeNonMatched) mappedIdentifiers.push(identifier)
        }
      }
      return { presentIdentifiers: mappedIdentifiers, timestamp }
    })
  }
}

export default plugin

interface Options {

  /**
   * Static mapping from source identitifiers to destination identifiers.
   */
  identifierMap?: { [identifier: string]: Identifier }

  /**
   * Whether to remove non-matched identifiers.
   */
  removeNonMatched?: boolean
}
