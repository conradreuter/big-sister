import { Identifier, StorePlugin } from '@big-sister'
import createLogger from '@big-sister/logging'
import * as Postgres from 'pg-promise'

const log = createLogger('store-postgres')

/**
 * Stores presence information via Postgres.
 */
const plugin: StorePlugin<{}> = async (options) => {
  const database = Postgres()(options)
  const rowIds = new Map<Identifier, number>()
  await setupDatabase()
  return { becomeAbsent, becomePresent, stayPresent }

  async function setupDatabase(): Promise<void> {
    log.info('Setting up database')
    await log.failOnError(database.none(`
      CREATE TABLE IF NOT EXISTS presence_intervals
      (
        row_id SERIAL PRIMARY KEY NOT NULL,
        identifier VARCHAR(128) NOT NULL,
        interval_from TIMESTAMP NOT NULL,
        interval_to TIMESTAMP NOT NULL
      );
    `))
  }

  async function becomeAbsent(identifier: Identifier, timestamp: Date) {
    log.verbose(`Forgetting row id for '${identifier}'`)
    rowIds.delete(identifier)
  }

  async function becomePresent(identifier: Identifier, timestamp: Date) {
    log.verbose(`Inserting new presence interval for '${identifier}'`)
    const result = await log.failOnError(database.one(
      `
        INSERT INTO presence_intervals(identifier, interval_from, interval_to)
        VALUES($<identifier>, $<from>, $<to>)
        RETURNING row_id
      `,
      {
        identifier,
        from: timestamp,
        to: timestamp,
      },
    ))
    const { row_id: rowId } = result
    log.verbose(`'${identifier}' has now row id ${rowId}`)
    rowIds.set(identifier, rowId)
  }

  async function stayPresent(identifier: Identifier, timestamp: Date) {
    const rowId = rowIds.get(identifier)
    log.verbose(`Updating presence interval for '${identifier}' with row id ${rowId}`)
    await log.failOnError(database.none(
      `
        UPDATE presence_intervals
        SET interval_to = $<to>
        WHERE row_id = $<rowId>
      `,
      {
        rowId,
        to: timestamp,
      },
    ))
  }
}

export default plugin
