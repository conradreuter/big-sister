import { Collector, Export, Extension, Interval, Spy, Store, Identifier, PastPresence } from '@big-sister'
import { makeExecutableSchema } from 'graphql-tools'
import { GraphQLSchema } from 'graphql'
import log from '../utility/logging'

const MIN_DATE = new Date(2000, 0)
const MAX_DATE = new Date(3000, 0)

export default function stitchSchema(
  collector: Collector,
  spy: Spy,
  store: Store,
  extensions: Extension[],
  exports: { [key: string]: Export },
): GraphQLSchema {
  return createRootSchema()

  function createRootSchema(): GraphQLSchema {
    return makeExecutableSchema({
      allowUndefinedInResolve: false,
      logger: { log: log.warn },
      resolvers: {
        Query: { currentPresence, export: exportt, pastPresences },
      },
      typeDefs: `
        # A date.
        scalar Date

        # Identifies someone.
        scalar Identifier

        # The schema contains the following queries:
        type Query {

          # Read the current presence.
          currentPresence: [Identifier!]!

          # Perform an export.
          export(key: ExportKey!, timeframe: IntervalInput): Export!

          # Read the past presence intervals.
          pastPresences(timeframe: IntervalInput): [PastPresence!]!
        }

        # An export of past presence data.
        type Export {

          # Base64-encoded data.
          data: String!

          # MIME type of the data
          mimeType: String!
        }

        # A key of an export.
        enum ExportKey {
          ${Object.keys(exports).join('\n')}
        }

        # A time interval.
        type Interval {

          # When the interval begins.
          from: Date!

          # When the interval ends.
          to: Date!
        }

        # A time interval.
        input IntervalInput {

          # When the interval begins.
          from: Date

          # When the interval ends.
          to: Date
        }

        # Past presence information about an identifier.
        type PastPresence {

          # The identifier this presence information is about.
          identifier: Identifier!

          # The intervals in which the identifier was present.
          intervals: [Interval!]!
        }
      `,
    })
  }

  function currentPresence(
    source: null,
    args: {},
  ): Identifier[] {
    return collector.getPresentIdentifiers()
  }

  async function exportt(
    source: null,
    args: {
      key: keyof typeof exports,
      timeframe?: Partial<Interval>,
    },
  ): Promise<{ data: string, mimeType: string }> {
    const exportt = exports[args.key]
    if (!exportt) throw new Error(`Unknown export '${args.key}'`)
    const presences = await pastPresences(null, args)
    const data = await exportt.generate(presences)
    return { data: data.toString('base64'), mimeType: exportt.mimeType }
  }

  function pastPresences(
    source: null,
    args: {
      timeframe?: Partial<Interval>,
    },
  ): Promise<PastPresence[]> {
    return store.readPastPresences({
      from: (args.timeframe ? args.timeframe.from : null) || MIN_DATE,
      to: (args.timeframe ? args.timeframe.to : null) || MAX_DATE,
    })
  }
}
