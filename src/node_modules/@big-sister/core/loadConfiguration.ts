import { Configuration } from '@big-sister'
import { LOG_LEVELS } from '@big-sister/logging'
import * as fs from 'fs'
import { promisify } from 'util'
import log from './utility/logging'

const CONFIG_FILE = 'big-sister.config.json'

const DEFAULT_CONFIGURATION: Configuration = {
  exports: { JSON: { options: {}, plugin: 'json' } },
  extensions: [],
  logLevel: 'warn',
  server: {
    graphiql: false,
    hostname: 'localhost',
    port: 3000,
  },
  spy: { options: {}, plugin: 'simulation' },
  store: { options: {}, plugin: 'memory' },
}

export default async function loadConfiguration(): Promise<Configuration> {
  const config = (null
    || await loadConfigurationFromFile()
    || {}
  )
  return {
    exports: config.exports || DEFAULT_CONFIGURATION.exports,
    extensions: config.extensions || DEFAULT_CONFIGURATION.extensions,
    logLevel: config.logLevel || DEFAULT_CONFIGURATION.logLevel,
    server: {
      graphiql: (config.server ? config.server.graphiql : null) || DEFAULT_CONFIGURATION.server.graphiql,
      hostname: (config.server ? config.server.hostname : null) || DEFAULT_CONFIGURATION.server.hostname,
      port: (config.server ? config.server.port : null) || DEFAULT_CONFIGURATION.server.port,
    },
    spy: config.spy || DEFAULT_CONFIGURATION.spy,
    store: config.store || DEFAULT_CONFIGURATION.store,
  }
}

async function loadConfigurationFromFile(): Promise<Partial<Configuration> | null> {
  try {
    const configFileContent = await promisify(fs.readFile)(CONFIG_FILE)
    return JSON.parse(configFileContent.toString())
  } catch (err) {
    log.error(`Error loading configuration file ${CONFIG_FILE}: ${err.stacktrace || err}`)
    return null
  }
}
