import { Extension, Interval, Store } from '@big-sister'
import { makeExecutableSchema } from 'graphql-tools'
import { GraphQLSchema } from 'graphql'
import log from './utility/logging'

const MIN_DATE = new Date(2000, 0)
const MAX_DATE = new Date(3000, 0)

export default function stitchSchema(
  store: Store,
  extensions: Extension[],
): GraphQLSchema {
  return createRootSchema()

  function createRootSchema(): GraphQLSchema {
    return makeExecutableSchema({
      allowUndefinedInResolve: false,
      logger: { log: log.warn },
      resolvers: {
        Query: {
          pastPresences(obj: null, { timeframe }: { timeframe?: Partial<Interval> }) {
            return store.readPastPresences({
              from: (timeframe ? timeframe.from : null) || MIN_DATE,
              to: (timeframe ? timeframe.to : null) || MAX_DATE,
            })
          },
        },
      },
      typeDefs: `
        # The schema contains the following queries:
        type Query {

          # Read the past presence intervals in a given time frame.
          pastPresences(timeframe: IntervalInput): [PastPresence!]!
        }

        # A date.
        scalar Date

        # A time interval.
        type Interval {

          # When the interval begins.
          from: Date!

          # When the interval ends.
          to: Date!
        }

        # A time interval.
        input IntervalInput {

          # When the interval begins.
          from: Date

          # When the interval ends.
          to: Date
        }

        # Past presence information about an identifier.
        type PastPresence {

          # The identifier this presence information is about.
          identifier: String!

          # The intervals in which the identifier was present.
          intervals: [Interval!]!
        }
      `,
    })
  }
}
