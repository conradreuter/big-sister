import { Extension, Identifier, Spy, Store } from '@big-sister'
import log from './utility/logging'

export default function createObserver(
  spy: Spy,
  store: Store,
  extensions: Extension[],
): Observer {
  const cache = new Map<Identifier, boolean>()
  const presence$ = extensions.reduce((p$, e) => e.transformPresence(p$), spy.presence$)
  return {
    start() {
      presence$.subscribe(async presence => {
        const { presentIdentifiers, timestamp } = presence
        const absentIdentifiers = new Set(cache.keys())
        await Promise.all(presentIdentifiers.map(async identifier => {
          if (cache.has(identifier)) {
            log.verbose(`'${identifier}' stays present`)
            await store.stayPresent(identifier, timestamp)
            absentIdentifiers.delete(identifier)
          } else {
            log.verbose(`'${identifier}' becomes present`)
            await store.becomePresent(identifier, timestamp)
            cache.set(identifier, true)
          }
        }))
        await Promise.all([...absentIdentifiers].map(async identifier => {
          log.verbose(`'${identifier}' becomes absent`)
          await store.becomeAbsent(identifier, timestamp)
          cache.set(identifier, false)
        }))
      })
      log.info('Observer started')
    }
  }
}

interface Observer {

  /**
   * Start watching for presence changes and store them.
   */
  start(): void
}
