import { Collector, Extension, Identifier, Presence, Spy, Store } from '@big-sister'
import log from '../utility/logging'

export default function createCollector(): Collector & { start: Start } {
  const cache = new Set<Identifier>()
  return { getPresentIdentifiers, start }

  function start(spy: Spy, store: Store, extensions: Extension[]): void {
    const presence$ = extensions.reduce((p$, e) => e.transformPresence(p$), spy.presence$)
    presence$.subscribe(async presence => {
      const { presentIdentifiers, timestamp } = presence
      log.verbose(`New presence:`)
      const absentIdentifiers = new Set(cache.keys())
      await Promise.all(presentIdentifiers.map(async identifier => {
        if (cache.has(identifier)) {
          log.verbose(`'${identifier}' stays present`)
          await store.stayPresent(identifier, timestamp)
          absentIdentifiers.delete(identifier)
        } else {
          log.verbose(`'${identifier}' becomes present`)
          await store.becomePresent(identifier, timestamp)
          cache.add(identifier)
        }
      }))
      await Promise.all([...absentIdentifiers].map(async identifier => {
        log.verbose(`'${identifier}' becomes absent`)
        await store.becomeAbsent(identifier, timestamp)
        cache.delete(identifier)
      }))
    })
    log.info('Collector started')
  }

  function getPresentIdentifiers(): Identifier[] {
    return [...cache]
  }
}

type Start = (spy: Spy, store: Store, extensions: Extension[]) => void
