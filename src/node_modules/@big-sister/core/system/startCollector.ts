import { Extension, Identifier, Presence, Spy, Store } from '@big-sister'
import log from '../utility/logging'

export default function startCollector(
  spy: Spy,
  store: Store,
  extensions: Extension[],
): Collector {
  const cache = new Set<Identifier>()
  const presence$ = extensions.reduce((p$, e) => e.transformPresence(p$), spy.presence$)
  presence$.subscribe(async presence => {
    const { presentIdentifiers, timestamp } = presence
    log.verbose(`New presence:`)
    const absentIdentifiers = new Set(cache.keys())
    await Promise.all(presentIdentifiers.map(async identifier => {
      if (cache.has(identifier)) {
        log.verbose(`'${identifier}' stays present`)
        await store.stayPresent(identifier, timestamp)
        absentIdentifiers.delete(identifier)
      } else {
        log.verbose(`'${identifier}' becomes present`)
        await store.becomePresent(identifier, timestamp)
        cache.add(identifier)
      }
    }))
    await Promise.all([...absentIdentifiers].map(async identifier => {
      log.verbose(`'${identifier}' becomes absent`)
      await store.becomeAbsent(identifier, timestamp)
      cache.delete(identifier)
    }))
  })
  log.info('Collector started')
  return { getPresentIdentifiers }

  function getPresentIdentifiers(): Identifier[] {
    return [...cache]
  }
}

/**
 * Collects presence data.
 */
export interface Collector {

  /**
   * Determine the identifiers currently being present.
   */
  getPresentIdentifiers(): Identifier[]
}
