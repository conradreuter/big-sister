import { LogLevel } from '@big-sister/logging'
import { Observable } from 'rxjs'

/**
 * Identifies someone.
 */
export type Identifier = string

/**
 * Information about who is present.
 */
export interface Presence {

  /**
   * The identifiers that are present.
   */
  presentIdentifiers: Identifier[]

  /**
   * When the presence snapshot was taken.
   */
  timestamp: Date
}

/**
 * An interval in which someone was present.
 */
export interface PresenceInterval {

  /**
   * When the identifier became present.
   */
  from: Date

  /**
   * When the identifier became absent.
   */
  to: Date
}

/**
 * Provides presence information.
 */
export interface Spy {

  /**
   * The presence information provided by this spy.
   */
  readonly presence$: Observable<Presence>
}

/**
 * Provides a spy.
 */
export type SpyPlugin<TOptions extends {}> = (options: TOptions) => Promise<Spy>

/**
 * Stores presence information.
 */
export interface Store {

  /**
   * Mark as becoming absent.
   */
  becomeAbsent(identifier: Identifier, timestamp: Date): Promise<void>

  /**
   * Mark as becoming present.
   */
  becomePresent(identifier: Identifier, timestamp: Date): Promise<void>

  /**
   * Mark as staying present.
   */
  stayPresent(identifier: Identifier, timestamp: Date): Promise<void>
}

/**
 * A plugin that provides a store.
 */
export type StorePlugin<TOptions extends {}> = (options: TOptions) => Promise<Store>

/**
 * Extends the functionality of the application.
 */
export interface Extension {

  /**
   * Transform the presence information provided by the spy.
   */
  transformPresence(presence$: Observable<Presence>): Observable<Presence>
}

/**
 * A plugin that provides an extension.
 */
export type ExtensionPlugin<TOptions extends {}> = (options: TOptions) => Promise<Partial<Extension>>

/**
 * The configuration of a plugin.
 */
export interface PluginConfiguration<TOptions extends {}> {

  /**
   * The options passed to the plugin.
   */
  options: TOptions

  /**
   * The name of the plugin to be used.
   */
  plugin: string
}

/**
 * The application's configuration.
 */
export interface Configuration {

  /**
   * The configurations of the extension plugins.
   */
  extensions: PluginConfiguration<any>[]

  /**
   * The logging level to be used.
   */
  logLevel: LogLevel

  /**
   * The configuration of the spy plugin.
   */
  spy: PluginConfiguration<any>

  /**
   * The configuration of the store plugin.
   */
  store: PluginConfiguration<any>
}
