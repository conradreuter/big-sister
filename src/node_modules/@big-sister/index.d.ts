import { LogLevel } from '@big-sister/logging'
import { Observable } from 'rxjs'
import { ObjectOmit } from 'typelevel-ts'

/**
 * Identifies someone.
 */
export type Identifier = string

/**
 * Information about who is present.
 */
export interface Presence {

  /**
   * The identifiers that are present.
   */
  presentIdentifiers: Identifier[]

  /**
   * When the presence snapshot was taken.
   */
  timestamp: Date
}

/**
 * A time interval.
 */
export interface Interval {

  /**
   * The start of the interval.
   */
  from: Date

  /**
   * The end of the interval.
   */
  to: Date
}

/**
 * Past presence information obtained from a store.
 */
export interface PastPresence {

  /**
   * The identifier this stored presence information is about.
   */
  identifier: Identifier

  /**
   * The intervals in which the identifier was present.
   */
  intervals: Interval[]
}

/**
 * Collects presence data.
 */
export interface Collector {

  /**
   * Determine the identifiers currently being present.
   */
  getPresentIdentifiers(): Identifier[]
}

/**
 * Provides presence information.
 */
export interface Spy {

  /**
   * The presence information provided by this spy.
   */
  readonly presence$: Observable<Presence>
}
export type SpyPlugin<TOptions extends {}> = (options: TOptions) => Promise<Spy>

/**
 * Stores presence information.
 */
export interface Store {

  /**
   * Mark as becoming present.
   */
  becomePresent(identifier: Identifier, timestamp: Date): Promise<void>

  /**
   * Mark as staying present.
   */
  stayPresent(identifier: Identifier, timestamp: Date): Promise<void>

  /**
   * Mark as becoming absent.
   */
  becomeAbsent(identifier: Identifier, timestamp: Date): Promise<void>

  /**
   * Read the past presence intervals in a given time frame.
   */
  readPastPresences(timeframe: Interval): Promise<PastPresence[]>

  /**
   * Read a key-value pair.
   */
  readKeyValuePair<T = any>(key: string): Promise<T | undefined>

  /**
   * Write a key-value pair.
   */
  writeKeyValuePair<T = any>(key: string, value: T): Promise<void>
}
export type StorePlugin<TOptions extends {}> = (options: TOptions) => Promise<Store>

/**
 * Provides an export format.
 */
export interface Export {

  /**
   * Generate an export.
   */
  generate(presences: PastPresence[]): Promise<Buffer>

  /**
   * The MIME type of the exported data.
   */
  mimeType: string

  /**
   * The readable name of the export.
   */
  name: string
}
export type ExportPlugin<TOptions extends {}> = (options: TOptions) => Promise<ObjectOmit<Export, 'name'>>

/**
 * Extends the functionality of the application.
 */
export interface Extension {

  /**
   * Transform the presence information provided by the spy.
   */
  transformPresence(presence$: Observable<Presence>): Observable<Presence>
}
export type ExtensionPlugin<TOptions extends {}> = (
  options: TOptions,
  collector: Collector,
  spy: Spy,
  store: Store,
) => Promise<Partial<Extension>>

/**
 * The configuration of a plugin.
 */
export interface PluginConfiguration<TOptions extends {}> {

  /**
   * The options passed to the plugin.
   */
  options: TOptions

  /**
   * The name of the plugin to be used.
   */
  plugin: string
}

/**
 * The application's configuration.
 */
export interface Configuration {

  /**
   * The configurations of the export formats.
   */
  exports: { [name: string]: PluginConfiguration<any> }

  /**
   * The configurations of the extension plugins.
   */
  extensions: PluginConfiguration<any>[]

  /**
   * The logging level to be used.
   */
  logLevel: LogLevel

  /**
   * The configuration of the web server.
   */
  server: {

    /**
     * Whether to expose the GraphiQL interface.
     */
    graphiql: boolean

    /**
     * The hostname to listen to. Defaults to localhost.
     */
    hostname: string

    /**
     * The port to listen on. Defaults to 3000.
     */
    port: number
  }

  /**
   * The configuration of the spy plugin.
   */
  spy: PluginConfiguration<any>

  /**
   * The configuration of the store plugin.
   */
  store: PluginConfiguration<any>
}
