import { ExportPlugin, PastPresence } from '@big-sister'
import createLogger from '@big-sister/logging'
import { flatMap, sumBy } from 'lodash'
import * as XLSX from 'xlsx'

const log = createLogger('export-xlsx')

const DEFAULT_OPTIONS: Options = {
  identifier: 'Identifier',
  intervalFrom: 'From',
  intervalTo: 'To',
}

/**
 * Export the presence information as XLSX.
 */
const plugin: ExportPlugin<Partial<Options>> = async (partialOptions) => {
  const options = { ...DEFAULT_OPTIONS, ...partialOptions }
  return {
    generate,
    fileExtension: 'xlsx',
    mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
  }

  async function generate(presences: PastPresence[]): Promise<Buffer> {
    log.verbose(`Exporting ${sumBy(presences, 'intervals.length')} entries as XLSX`)
    const data = flatMap(presences, ({ identifier, intervals }) => (
      intervals.map(interval => ({
        [options.identifier]: identifier,
        [options.intervalFrom]: interval.from,
        [options.intervalTo]: interval.to,
      }))
    ))
    const workbook = XLSX.utils.book_new()
    const worksheet = XLSX.utils.json_to_sheet(data)
    XLSX.utils.book_append_sheet(workbook, worksheet)
    return XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' })
  }
}

export default plugin

interface Options {

  /**
   * The header of the column containing the identifier.
   */
  identifier: string

  /**
   * The header of the column containing the start of the interval.
   */
  intervalFrom: string

  /**
   * The header of the column containing the end of the interval.
   */
  intervalTo: string
}
